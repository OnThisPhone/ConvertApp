using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

/***
 * RegEdit:
 * The HKEY_CLASSES_ROOT -> * -> shell -> "Convert" folder should have a string called icon with the icon
 *                                     -> Convert -> command. should have as the (Default) the path to the exe file
 *      icon: C:\Users\Jojo\source\repos\ConvertApp\ConvertApp\bin\Debug\assets\icons\convert.ico
 *            Set automatically from the exe's path assets/icons/convert.ico
 *      exe:  C:\Users\Jojo\source\repos\ConvertApp\ConvertApp\bin\Debug\ConvertApp.exe
 *            Should just be the current exe file
 *      
 * ********
 * 
 * 2 means the exe will be referencing the app itself, 1 means it'll just use the ffmpeg.exe/console. 0 means it gets removed/none.
 *
 * NOTE Windows 11 (And probably up in the future) has a different type of context menu in windows explorer. Don't have a Windows 11 PC to try on, so i can't add something for that.
 *      But from what i understand, you can get to the normal one easily enough.
 */
namespace ConvertApp
{
    internal class RegEdit
    {
        /// <summary>
        /// Checks if the context keys exists in the registry.
        /// </summary>
        /// <returns>True if they do, false if they don't</returns>
        public static bool Exists()
        {
            return Registry.ClassesRoot.OpenSubKey("*\\shell\\Convert") != null;
        }
        
        /// <summary>
        /// Changes the status of the windows explorer context menu.
        /// Keep in mind that these actions require <b>ADMIN PRIVILEGES</b>. For an example on how, check the FormOptions implementation of this function.
        /// </summary>
        /// <param name="type">What type to change to. 2 for app, 1 for console and 0 for removing it</param>
        public static void ChangeContextMenu(int type)
        {
            //Add a context menu if the type is 2 or 1. Remove it if it's 0
            if (type == 1 || type == 2)
                AddContextMenu(type);
            else if (type == 0)
                RemoveContextMenu();

            //Change the setting to what type is currently active.
            Properties.Settings.Default.intigration = type;
        }

        public static void RemoveContextMenu()
        {
            try
            {
                Registry.ClassesRoot.DeleteSubKeyTree("*\\shell\\Convert");
            }
            catch(Exception e)
            {
                MessageBox.Show($"{Lang.R.Text.Error}: {e.Message}", Lang.R.Text.Error);
            }
        }

        /// <summary>
        /// Adds a context menu to windows explorer
        /// </summary>
        /// <param name="type">2 means the exe will be referencing the app itself, 1 means it'll just use the ffmpeg.exe/console</param>
        public static void AddContextMenu(int type)
        {
            //Set some initial values to be put into the registry
            //Note that the \" has to be the actual parameter. That's why it has \\\"
            //Note the %1. That's a parameter generated by Explorer. It gives you the entire path to the file you right clicked.
            //Note that there's more info about the arguments string in the SystemIntegration class.
            string exe = System.Reflection.Assembly.GetExecutingAssembly().Location;
            string exePath = exe.Substring(0, exe.LastIndexOf('\\'));
            string arguments = "-context WindowsExplorer -ffmpeg -y -i \\\"%1\\\" -ffmpegend -ir true -oc false -op false";
            string exeAndArguments = $"{exe} {arguments}";
            string icon = $"{exePath}\\assets\\icons\\convert.ico";

            try
            {
                //Creates all the keys and values needed for the context menu to work properly
                //Keys are represented as folders in RegEdit.exe
                //Start with opening the * folder
                RegistryKey key = Registry.ClassesRoot.OpenSubKey("*", true);

                //Open the shell folder
                key = key.OpenSubKey("shell", true);

                //Create a new folder inside shell called Convert (This is the menu item in the context menu in Windows Explorer
                key.CreateSubKey("Convert");

                //Open the new folder that was created and make it writable.
                key = key.OpenSubKey("Convert", true);

                //Set and create a new string value inside the folder called "icon" and assign it the icon variable
                key.SetValue("icon", icon);

                //Create a new folder inside the "Convert" folder
                key.CreateSubKey("command");

                //Open the new folder that was created and make it writable.
                key = key.OpenSubKey("command", true);

                //Set the (Default) value (Note the empty name here. It means the (Default) value) to the entire exearguments string.
                key.SetValue("", exeAndArguments);
            }
            catch(SecurityException e)
            {
                //Error message if it fails for whatever reason
                MessageBox.Show($"App has to run with the correct priviliges\n\n{e}");
            }
            catch(Exception e)
            {
                //Another generalized error.
                MessageBox.Show($"{Lang.R.Text.Error}: {e}");
            }
        }

        /// <summary>
        /// Prompt the user to change whether or not to use the context menu integration in Windows Explorer.
        /// Depending on the "type" parameter
        /// </summary>
        /// <param name="type">The type of integration. None, App and Console.</param>
        /// <returns>False is used in the options menu for setting controls it has</returns>
        public static bool PromptChange(int type)
        {
            //Check if the user is admin or not.
            //If they're not, restart the app and use the SystemIntegration class to set it at start using a exe parameter called -settingConv
            //If they are, just change it here and now! :D
            if (!Common.IsAdmin())
            {
                //Ask the user if they want to become admin and rule the world.
                DialogResult result = MessageBox.Show("Administrator privileges are required to add a 'convert' context menu in Windows Explorer. It means that, if you right click on an mp4 file (As an example), it will let you instantly convert that file. Do you want to add that?", "Privilege Request", MessageBoxButtons.YesNo);

                //Restarts the app with admin privs if the user decided to do that.
                if (result == DialogResult.Yes)
                {
                    //Restarts the application with privileges.
                    bool privSucceded = Common.RestartAppWithAdminPrivs(type);

                    //If the user didn't agree to give the app admin privs.
                    if (!privSucceded)
                        return false;//Mainly used for in the options form: Resets the radio buttons to the initial value.
                }
                else
                    return false;//Mainly used for in the options form: Resets the radio buttons to the initial value.
            }
            else
            {
                //Does the change directly. Ah... Nice.
                RegEdit.ChangeContextMenu(type);
            }

            //Returns true! Super explanatory!
            return true;
        }
    }
}
